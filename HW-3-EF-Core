using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            using (var db = new ApplicationContext())
            {
                db.Database.EnsureDeleted();
                db.Database.EnsureCreated();

                while (true)
                {
                    Console.WriteLine("1. Register");
                    Console.WriteLine("2. Login");
                    Console.WriteLine("3. Exit");

                    var choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            Register(db);
                            break;
                        case "2":
                            Login(db);
                            break;
                        case "3":
                            return; // Exit the application
                        default:
                            Console.WriteLine("Invalid choice.");
                            break;
                    }
                }
            }
        }

        static void Register(ApplicationContext db)
        {
            Console.Write("Enter username: ");
            var username = Console.ReadLine();
            Console.Write("Enter password: ");
            var password = Console.ReadLine();

            if (db.Users.Any(u => u.Username == username))
            {
                Console.WriteLine("User already exists.");
                return;
            }

            var (passwordHash, salt) = PasswordHelper.HashPassword(password);

            var user = new User
            {
                Username = username,
                PasswordHash = passwordHash,
                Salt = salt
            };

            db.Users.Add(user);
            db.SaveChanges();
            Console.WriteLine("User registered successfully.");
            ShowMainMenu();
        }

        static void Login(ApplicationContext db)
        {
            Console.Write("Enter username: ");
            var username = Console.ReadLine();
            Console.Write("Enter password: ");
            var password = Console.ReadLine();

            var user = db.Users.SingleOrDefault(u => u.Username == username);
            if (user != null && PasswordHelper.VerifyPassword(password, user.PasswordHash, user.Salt))
            {
                Console.WriteLine("Login successful.");
                ShowMainMenu();
            }
            else
            {
                Console.WriteLine("Invalid username or password.");
            }
        }

        static void ShowMainMenu()
        {
            Console.WriteLine("Main Menu");
            // Add main menu functionality here
        }
    }

    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; } = null!;
        public string PasswordHash { get; set; } = null!;
        public string Salt { get; set; } = null!;
    }

    public class ApplicationContext : DbContext
    {
        public DbSet<User> Users { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Server=DESKTOP-GVAO16L;Database=UserDb;Trusted_Connection=True;TrustServerCertificate=True;");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().HasKey(u => u.Id);
            base.OnModelCreating(modelBuilder);
        }
    }

    public static class PasswordHelper
    {
        public static (string Hash, string Salt) HashPassword(string password)
        {
            using (var rng = new RNGCryptoServiceProvider())
            {
                var saltBytes = new byte[16];
                rng.GetBytes(saltBytes); // Generate a salt
                var salt = Convert.ToBase64String(saltBytes);

                using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, 10000))
                {
                    var hashBytes = pbkdf2.GetBytes(20);
                    var hash = Convert.ToBase64String(hashBytes);
                    return (hash, salt);
                }
            }
        }

        public static bool VerifyPassword(string password, string storedHash, string storedSalt)
        {
            var saltBytes = Convert.FromBase64String(storedSalt);
            using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, 10000))
            {
                var hashBytes = pbkdf2.GetBytes(20);
                var hash = Convert.ToBase64String(hashBytes);
                return hash == storedHash;
            }
        }
    }
}
